<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/10/02/quick-sort/"/>
      <url>/2019/10/02/quick-sort/</url>
      
        <content type="html"><![CDATA[<p>快速排序是比较常用的一种排序算法，复杂度为 O(nlog(n))，使用的是分而治之的方法。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote><p>实现数组升序排序</p></blockquote><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>以数组中间值作为参考，将数组拆分为小数区域(小于等于中间值的元素)和大数区域(大于中间值的元素)。</li><li>对小数区域和大数区域分布进行 1 操作，递归直至拆分后的区域只有一个元素。</li></ol><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">const quickSort = (arry) =&gt; {</span><br><span class="line">  quick(arry, 0, arry.length - 1)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">const quick = (arry, left, right) =&gt; {</span><br><span class="line">  const { length } = arry</span><br><span class="line">  if (length &gt; 1) {</span><br><span class="line">    const index = partition(arry, left, right)</span><br><span class="line">    if (left &lt; index - 1) {</span><br><span class="line">      quick(arry, left, index - 1)</span><br><span class="line">    }</span><br><span class="line">    if (right &gt; index) {</span><br><span class="line">      quick(arry, index, right)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">// 从数组两侧往中间遍历，以中间元素作为参考值。左侧查找大于参考值的元素，右侧查找小于参考值的元素。</span><br><span class="line">const partition = (arry, left, right, asc = true) =&gt; {</span><br><span class="line">  const pivot = arry[Math.floor((left + right) / 2)]</span><br><span class="line">  let i = left</span><br><span class="line">  let j = right</span><br><span class="line">  while (i &lt;= j) {</span><br><span class="line">    while (arry[i] &lt; pivot) { // {1}</span><br><span class="line">        i++</span><br><span class="line">    }</span><br><span class="line">    while (arry[j] &gt; pivot) { // {2}</span><br><span class="line">        j--</span><br><span class="line">    }</span><br><span class="line">    if (i &lt;= j) {</span><br><span class="line">      swapInList(arry, i, j)</span><br><span class="line">      i++</span><br><span class="line">      j--</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return i</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">const swapInList = (list, a, b) =&gt; {</span><br><span class="line">  temp = list[a]</span><br><span class="line">  list[a] = list[b]</span><br><span class="line">  list[b] = temp</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/01/hello-world/"/>
      <url>/2019/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
