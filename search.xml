<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/10/02/quick-sort/"/>
      <url>/2019/10/02/quick-sort/</url>
      
        <content type="html"><![CDATA[<p>快速排序是比较常用的一种排序算法，复杂度为 O(nlog(n))，使用的是分而治之的方法。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote><p>实现数组升序排序</p></blockquote><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>以数组中间值作为参考，将数组拆分为小数区域(小于等于中间值的元素)和大数区域(大于中间值的元素)。</li><li>对小数区域和大数区域分布进行 1 操作，递归直至拆分后的区域只有一个元素。</li></ol><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> quickSort <span class="token operator">=</span> arry <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arry<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 元素长度大于1，才进行排序。</span><span class="token comment" spellcheck="true">// 将元素拆分为左右大小区域，然后分别对左右区域进行拆分。</span><span class="token keyword">const</span> quick <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> arry  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> index<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从数组两侧往中间遍历，以中间元素作为参考值。左侧向中间查找大于或等于参考值的元素，右侧向中间查找小于或等于参考值的元素。将查找到的左右两侧的元素进行替换，继续往中间查找。当左侧索引大于右侧索引，停止查找。最终左侧的元素都小于右侧的元素。</span><span class="token keyword">const</span> partition <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> arry<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left  <span class="token keyword">let</span> j <span class="token operator">=</span> right  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// {3}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      i<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      j<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// {4}</span>      <span class="token function">swapInList</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      i<span class="token operator">++</span>      j<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token keyword">const</span> swapInList <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  temp <span class="token operator">=</span> list<span class="token punctuation">[</span>a<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>b<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">}</span></code></pre><p>假设中间参考值为 m。<br>对行 3 取 i === j 时，存在以下几种情况:</p><ol><li><p><code>arry[i] === arry[j] === m</code>，则 <code>i++,j--</code>，函数返回 i。对应于行 4 ，i === j 的情况。</p><blockquote><p><img src="/medias/quick-sort/1.png" alt></p></blockquote></li><li><p><code>arry[i] === arry[j] &lt; m</code>，则 <code>i++</code>，j 不变，函数返回 i。</p><blockquote><p><img src="/medias/quick-sort/2.png" alt><br>或者<br><img src="/medias/quick-sort/3.png" alt></p></blockquote></li><li><p><code>arry[i] === arry[j] &gt; m</code>，则 i 不变,<code>j--</code>，函数返回 i。</p><blockquote><p><img src="/medias/quick-sort/4.png" alt><br>或者<br><img src="/medias/quick-sort/5.png" alt></p></blockquote><p>因此数组中索引 0~i-1 为小数区域，&gt;=i 为大数区域，left &lt;= i &lt;= right。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
