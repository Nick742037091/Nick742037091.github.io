<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css选择器</title>
      <link href="/2019/10/24/css-selector/"/>
      <url>/2019/10/24/css-selector/</url>
      
        <content type="html"><![CDATA[<p>本文列出各种常用的css选择器。</p><blockquote><p> 以下为三种最基础的选择器。 </p></blockquote><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.name</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#name</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p> 以下的选择器中元素、类和ID选择器可以互相替换。 </p></blockquote><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><pre class=" language-css"><code class="language-css"><span class="token selector">p a</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><ul><li>只选择元素的直接后代</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#nav</span> > a</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="相邻同辈选择器"><a href="#相邻同辈选择器" class="headerlink" title="相邻同辈选择器"></a>相邻同辈选择器</h4><ul><li>只选择元素的第一个相邻同辈元素</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#nav</span> + a</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="同辈选择器"><a href="#同辈选择器" class="headerlink" title="同辈选择器"></a>同辈选择器</h4><ul><li>选择元素的之后的所有同辈元素</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#nav</span> ~ a</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><ul><li>用于初始化所有选择器(不过一般不这么做，而是通过元素选择器分别设置)。</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>与其他选择器组合，表示选择某个元素的所有子元素</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.title-block</span> > * </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 匹配属性是否存在 */</span><span class="token selector">input<span class="token attribute">[type]</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配属性全等 */</span><span class="token selector">input<span class="token attribute">[type="submit"]</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配开头 */</span><span class="token selector">a<span class="token attribute">[href^="http"]</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配结尾 */</span><span class="token selector">img[src$="<span class="token class">.jpg</span>"]</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配某些字符 */</span><span class="token selector">a<span class="token attribute">[href*="about"]</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><ul><li>可减少元素数量</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选择首字符 */</span><span class="token selector"><span class="token class">.text</span><span class="token pseudo-element">::first-letter</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首行 */</span><span class="token selector"><span class="token class">.text</span><span class="token pseudo-element">::first-line</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 开头插入内容 */</span><span class="token selector"><span class="token class">.text</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"insert "</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 结尾插入内容 */</span><span class="token selector"><span class="token class">.text</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" insert"</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 对于以下的a标签，下面的状态会覆盖上面的状态 */</span><span class="token comment" spellcheck="true">/* 未访问过的链接 */</span><span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 访问过的链接 */</span><span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 鼠标悬停和状态 */</span><span class="token selector">a<span class="token pseudo-class">:hover</span>,a<span class="token pseudo-class">:focus</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 鼠标点击或者键盘回车选择状态 */</span><span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 通过urll#号后面的内容找到对应id的元素，会显示的状态 */</span><span class="token selector"><span class="token class">.comment</span><span class="token pseudo-class">:target</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 反选 */</span><span class="token selector"><span class="token class">.text</span><span class="token pseudo-class">:not(first-letter)</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="结构化伪类"><a href="#结构化伪类" class="headerlink" title="结构化伪类"></a>结构化伪类</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 以下都是指选择子元素 */</span><span class="token comment" spellcheck="true">/* 选择奇数序列 */</span><span class="token selector">tr<span class="token pseudo-class">:nth-child(odd)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择偶数序列 */</span><span class="token selector">tr<span class="token pseudo-class">:nth-child(even)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择第三个 */</span><span class="token selector">tr<span class="token pseudo-class">:nth-child(3)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择倒数第三个 */</span><span class="token selector">tr<span class="token pseudo-class">:nth-last-child(3)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择第1个，等同于nth-child(1) */</span><span class="token selector">tr<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择最后1个，等同于nth-last-child(1) */</span><span class="token selector">tr<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 通过计算公式选择，这里匹配4、7、10、13... */</span><span class="token selector">tr<span class="token pseudo-class">:nth-child(3n+4)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择前3个 */</span><span class="token selector">tr<span class="token pseudo-class">:nth-child(n-3)</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="表单伪类"><a href="#表单伪类" class="headerlink" title="表单伪类"></a>表单伪类</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选择没有required的input标签 */</span><span class="token selector">input<span class="token pseudo-class">:optional</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择输入有效电子邮件地址的input标签 */</span><span class="token selector">input<span class="token attribute">[type="email"]</span><span class="token pseudo-class">:valid</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择输入无效电子邮件地址的input标签 */</span><span class="token selector">input<span class="token attribute">[type="email"]</span><span class="token pseudo-class">:invalid</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html语义化</title>
      <link href="/2019/10/24/html-semantic/"/>
      <url>/2019/10/24/html-semantic/</url>
      
        <content type="html"><![CDATA[<p>  html5中加入了一些语义化标签，来更清晰的表达文档结构。使用这些为了能够让开发者或是爬虫读懂各个模块的语义化内容。语义化标签使用没有严格的要求，本文只是阐述一些语义化标签的常用用法。</p><ul><li><a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a>前端页面就大量使用了语义化标签。</li><li><a href="https://element.eleme.cn/#/zh-CN/component/container" target="_blank" rel="noopener">Element组件</a>也封装了一些语义化的组件。</li></ul><h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h3><p>  <img src="/medias/html-semantic/1.jpg" alt=""></p><h3 id="HTML5新增的语义化标签"><a href="#HTML5新增的语义化标签" class="headerlink" title="HTML5新增的语义化标签"></a>HTML5新增的语义化标签</h3><p><code>&lt;header&gt;</code></p><ul><li>用于页面body底部，可包含标题、导航栏和搜索栏等。</li><li>用于表示模块的头部，可用于section、article之中。</li></ul><p><code>&lt;nav&gt;</code></p><ul><li>用于定义导航，链接等。</li></ul><p><code>&lt;main&gt;</code></p><ul><li>用于表示页面的主体部分。</li></ul><p><code>&lt;aside&gt;</code></p><ul><li>用于作为侧边栏。</li><li>用于作为嵌入内容（在article内），用于展示一些附加信息。</li></ul><p><code>&lt;footer&gt;</code></p><ul><li>用于作为页脚。</li><li>用于展示article或者section的底部信息。</li></ul><p><code>&lt;article&gt;</code></p><ul><li>用于表示页面中的一段独立的内容，通常情况下包括标题、正文和脚注。article可以嵌套使用，但是必须是整体与部分的关系，比如文章中的评论部分。</li></ul><p><code>&lt;section&gt;</code></p><ul><li>用于对页面进行分块。</li><li>用于文章等进行分段。</li></ul><h3 id="附：一些常用结构化标签。"><a href="#附：一些常用结构化标签。" class="headerlink" title="附：一些常用结构化标签。"></a>附：一些常用结构化标签。</h3><h5 id="HTML5之前的"><a href="#HTML5之前的" class="headerlink" title="HTML5之前的"></a>HTML5之前的</h5><p><code>&lt;p&gt;</code> : 用于表示段落。</p><p><code>&lt;li&gt;</code>: 用于表示列表。</p><h5 id="HTML5新增的"><a href="#HTML5新增的" class="headerlink" title="HTML5新增的"></a>HTML5新增的</h5><p><code>&lt;em&gt;</code>: 代替<code>&lt;i&gt;</code>，表示强调，显示为斜体。</p><p><code>&lt;strong&gt;</code>: 代替<code>&lt;b&gt;</code>，表示强调，显示为粗体。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> 语义化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫问题</title>
      <link href="/2019/10/20/maze/"/>
      <url>/2019/10/20/maze/</url>
      
        <content type="html"><![CDATA[<p>本文描述的是找出走出迷宫的问题，迷宫是 NxN 的矩阵，入口为左上角，出口为右下角。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>假设迷宫矩阵中每个位置为一个方块，每个方块可以是空闲的(值为 1)或者是被阻挡的(值为 0)。</p><ol><li>创建一个二级数组 solution 用于存储结果。将 solution 的初始位置置 1， 从矩形的初始位置(左上角)开始查找。</li><li>判断当前位置是否位于右下角，如果是的话，将 solution 对应的位置值 1，直接返回。判断当前位置是否为 1，若是的话就 solution 对应的位置值 1，执行下一步，否则直接返回。</li><li>向右(x+1)查找，如果该位置为 0，返回上一级执行步骤 4；如果该位置为 1，将 solution 的对应的位置位置置 1，则执行再向右查找，执行步骤 2，依次类推。</li><li>向下(y+1)查找，如果该位置为 0，返回上一级执执行步骤 5；如果该位置为 1，将 solution 的对应的位置位置置 1，执行步骤 3，依次类推。</li><li>将 solution 的对应的位置位置置 0，结束该位置的查找，返回上一级。</li><li>最终 solution 的置为 1 的位置表示了走出迷宫的路径。</li></ol><p><img src="/medias/maze/1.png" alt=""></p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> rateInMaze <span class="token operator">=</span> maze <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> solution <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> maze  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maze<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    solution<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      solution<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">findPath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> solution<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> solution  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">const</span> findPath <span class="token operator">=</span> <span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> solution<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> maze  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">===</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSafe</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token function">findPath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> solution<span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token function">findPath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> solution<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    solution<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">const</span> isSafe <span class="token operator">=</span> <span class="token punctuation">(</span>maze<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> maze  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共子序列</title>
      <link href="/2019/10/20/lcs/"/>
      <url>/2019/10/20/lcs/</url>
      
        <content type="html"><![CDATA[<p>本文描述的是找出两个字符中以相同顺序出现，但不要求连续（非字符串子串）的最长子字符串。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>迭代字符串 X，假设当前字符为 a,从第一个字符开始迭代字符串 Y，直到找到相同字符所在的位置 index。<br>往后迭代字符串 X，在下一次迭代字符串 Y 的时候从 index+1 开始迭代。以此类推，将所有找到的相同字符串组合成最长公共子序列。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> lcs <span class="token operator">=</span> <span class="token punctuation">(</span>strX<span class="token punctuation">,</span> strY<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">let</span> startY <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> strX<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wX <span class="token operator">=</span> strX<span class="token punctuation">[</span>x<span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> strY<span class="token punctuation">.</span>length<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> wY <span class="token operator">=</span> strY<span class="token punctuation">[</span>y<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>wX <span class="token operator">===</span> wY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> wX        startY <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 动态规划算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2019/10/19/bag-quesiotn/"/>
      <url>/2019/10/19/bag-quesiotn/</url>
      
        <content type="html"><![CDATA[<p>本文描述的是在一组不同重量和价值的背包中，给定最大重量，找出两两组合最大价值的背包。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>优先排除超重背包和相等重量价值较低的背包。</li><li>遍历所有背包，对于每个背包，按照当前背包重量+1至最大重量作为总重量进行遍历，获取可与当前背包组合的背包，得到组合后的价值。</li><li>对比所有的组合的价值，得出最大的总价值和。</li></ol><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bagQuestion <span class="token operator">=</span> <span class="token punctuation">(</span>bagList<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> wMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> maxRes <span class="token operator">=</span> <span class="token punctuation">{</span>    w1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    w2<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  bagList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bag <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> weight<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> bag    <span class="token comment" spellcheck="true">// 排除超重的背包</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>weight <span class="token operator">>=</span> capacity<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment" spellcheck="true">// 重量一样，价格较低优先的被排除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      wMap<span class="token punctuation">[</span>weight<span class="token punctuation">]</span> <span class="token operator">===</span> undefined <span class="token operator">||</span>      <span class="token punctuation">(</span>wMap<span class="token punctuation">[</span>weight<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> wMap<span class="token punctuation">[</span>weight<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&lt;</span> value<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      wMap<span class="token punctuation">[</span>weight<span class="token punctuation">]</span> <span class="token operator">=</span> bag    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> wKey <span class="token keyword">in</span> wMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> w1 <span class="token operator">=</span> <span class="token operator">+</span>wKey    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> total <span class="token operator">=</span> w1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> total <span class="token operator">&lt;=</span> capacity<span class="token punctuation">;</span> total<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> w2 <span class="token operator">=</span> wMap<span class="token punctuation">[</span>total <span class="token operator">-</span> w1<span class="token punctuation">]</span> <span class="token operator">?</span> wMap<span class="token punctuation">[</span>total <span class="token operator">-</span> w1<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token comment" spellcheck="true">// 没有可与当前背包组合的背包</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>w2<span class="token punctuation">)</span> <span class="token keyword">continue</span>      <span class="token keyword">let</span> curVal <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">let</span> maxVal <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">const</span> noMax <span class="token operator">=</span> maxRes<span class="token punctuation">.</span>w1 <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maxRes<span class="token punctuation">.</span>w2 <span class="token operator">===</span> <span class="token number">0</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>noMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curVal <span class="token operator">=</span> wMap<span class="token punctuation">[</span>w1<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">+</span> wMap<span class="token punctuation">[</span>w2<span class="token punctuation">]</span><span class="token punctuation">.</span>value        maxVal <span class="token operator">=</span> wMap<span class="token punctuation">[</span>maxRes<span class="token punctuation">.</span>w1<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">+</span> wMap<span class="token punctuation">[</span>maxRes<span class="token punctuation">.</span>w2<span class="token punctuation">]</span><span class="token punctuation">.</span>value      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 判断每个组合价值得到最大价值的组合</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>noMax <span class="token operator">||</span> curVal <span class="token operator">></span> maxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxRes <span class="token operator">=</span> <span class="token punctuation">{</span>          w1<span class="token punctuation">,</span>          w2        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>wMap<span class="token punctuation">[</span>maxRes<span class="token punctuation">.</span>w1<span class="token punctuation">]</span><span class="token punctuation">,</span> wMap<span class="token punctuation">[</span>maxRes<span class="token punctuation">.</span>w2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 动态规划算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最少硬币找零问题</title>
      <link href="/2019/10/14/min-num-coin/"/>
      <url>/2019/10/14/min-num-coin/</url>
      
        <content type="html"><![CDATA[<p>动态规划是一种将复杂问题分解为更小的子问题来解决的优化技术。本文描述的是从给定零钱数组中，找出组合成指定金额数量最少的搭配。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>迭代数组，用指定金额减迭代项，得到余数。</li><li>若余数大于 0，用余数代替指定金额，重复 1 步骤，递归至余数为 0。余数为 0 时，返回空数组。</li><li>在步骤 1 的每次迭代中可得到组成余数的零钱数组，和迭代项合并成数组 C。返回所有迭代之中长度最小的数组 C。</li><li>将指定金额和对应的最少数组 C 缓存起来，避免重复查询。</li><li>将所有 1 步骤得到的最少数组合并起来得到最终的最少数组。</li></ol><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> minCoinChange <span class="token operator">=</span> <span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 缓存各个值对应的最少零钱数组</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 缓存最少零钱数组长度,初始化为无效大</span>  <span class="token keyword">let</span> minNum <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_VALUE  <span class="token comment" spellcheck="true">// 最终得到的最少零钱数组</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> makceChange <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>value<span class="token punctuation">]</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    coins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      newAmount <span class="token operator">=</span> value <span class="token operator">-</span> item      <span class="token comment" spellcheck="true">// 余数小于0不处理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newAmount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>      <span class="token keyword">let</span> newMin <span class="token operator">=</span> <span class="token function">makceChange</span><span class="token punctuation">(</span>newAmount<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 对比得到组成value的最少零钱数组</span>      <span class="token comment" spellcheck="true">// 存在余数大于零且无法由零钱组合成(newMin.length === 0)的情况，此时不做处理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span>min<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> newMin<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> min<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>newMin<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> newAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">,</span> <span class="token operator">...</span>newMin<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 对比得到组成指定金额amount的最少零钱数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> amount <span class="token operator">&amp;&amp;</span> min<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> minNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>          minNum <span class="token operator">=</span> min<span class="token punctuation">.</span>length          res <span class="token operator">=</span> min        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">makceChange</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 动态规划算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fisher-Yates随机算法</title>
      <link href="/2019/10/10/Fisher-Yates-random/"/>
      <url>/2019/10/10/Fisher-Yates-random/</url>
      
        <content type="html"><![CDATA[<p>一种适用于对数组进行随机排序的算法。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>迭代数组，从最后一位开始将当前位置和一个随机位置进行交互，这个随机位置比当前位置小。这样，这个算法可以保证随机过的位置不会再被随机一次。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> swapInList <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  temp <span class="token operator">=</span> list<span class="token punctuation">[</span>a<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>b<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">}</span><span class="token keyword">const</span> shuffle <span class="token operator">=</span> arry <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arry<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">swapInList</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> i<span class="token punctuation">,</span> randomIndex<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arry<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 随机算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内插搜索法</title>
      <link href="/2019/10/09/interpolation-search/"/>
      <url>/2019/10/09/interpolation-search/</url>
      
        <content type="html"><![CDATA[<p>内插搜索法是改良版的二分搜索法，适用于搜索已排序的数组，时间复杂度为 O(n)，在数组分布均匀时性能最好。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>利用数组最大值和最小值，计算出查找值的大概索引 index，若查找值小于 index 对应的值，则将 index-1 作为最大值，重新计算索引进行对比；若查找值大于 index 对应的值，则将 index+1 作为最小值，重新计算索引进行对比。以此类推，直到找到对应的值或者查找区域只有一个元素(没有对应的值)。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 内插搜索法 * @param {数组} arry * @param {搜索的值} value */</span><span class="token keyword">const</span> interpolationSearch <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> arry  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> value <span class="token operator">>=</span> arry<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> arry<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    delta <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">-</span> arry<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> arry<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span>    position <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">*</span> delta<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> position    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      low <span class="token operator">=</span> position <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      high <span class="token operator">=</span> position <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分搜索法</title>
      <link href="/2019/10/09/binary-search/"/>
      <url>/2019/10/09/binary-search/</url>
      
        <content type="html"><![CDATA[<p>二分搜索法是适用于已排序数组的搜索算法，时间复杂度为 O(log(n))。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>取数组中间数进行对比，若小于中间数，则取最小值和中间值之间的中间数进行对比；<br>若大于中间数，则取中间数和最大值之间的中间数进行对比。以此类推，直到找到对应的值或者查找区域只有一个元素(没有对应的值)。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 数组二分搜索 * @param {搜索的数组}} arry * @param {搜索的值} value */</span><span class="token keyword">const</span> binarySearch <span class="token operator">=</span> <span class="token punctuation">(</span>sortArry<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> high <span class="token operator">=</span> sortArry<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> sortArry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> sortArry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> mid    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><pre class=" language-js"><code class="language-js"><span class="token operator">**</span> <span class="token operator">*</span> 数组二分搜索 <span class="token operator">*</span> @param <span class="token punctuation">{</span>排序的数组<span class="token punctuation">}</span> sortArray <span class="token operator">*</span> @param <span class="token punctuation">{</span>搜索的值<span class="token punctuation">}</span> value <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">const</span> binSearch <span class="token operator">=</span> <span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> high <span class="token operator">=</span> sortArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token function">binSearchRecursive</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> binSearchRecursive <span class="token operator">=</span> <span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">===</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sortArray<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">===</span> value <span class="token operator">?</span> low <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> sortArray<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">binSearchRecursive</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">binSearchRecursive</span><span class="token punctuation">(</span>sortArray<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> midIndex  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 搜索算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2019/10/09/base-sort/"/>
      <url>/2019/10/09/base-sort/</url>
      
        <content type="html"><![CDATA[<p>基数排序是一种分布式排序算法，是根据数字的基数(如十进制数基数为 10)将整数分布到桶中。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>以十进制数为例，先根据个位数字，利用桶排序法(10 个桶)进行排序，生成新数组。再对十位数字进行排序，生成新数组。以此类推，最高位排序之后即为结果数组。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 基数排序 * @param {数组} arry * @param {基数} base * @param {是否升序排序} asc */</span><span class="token keyword">const</span> baseSort <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用字符串长度获取最大数字长度</span>  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span>  arry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>      maxLength <span class="token operator">=</span> length    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arry <span class="token operator">=</span> <span class="token function">baseBucketSort</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> i<span class="token punctuation">,</span> base<span class="token punctuation">,</span> asc<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arry<span class="token punctuation">}</span><span class="token keyword">const</span> baseBucketSort <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> index<span class="token punctuation">,</span> base<span class="token punctuation">,</span> asc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//创建桶</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> base<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//根据对应位数字分布到各个桶</span>  arry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> bucketIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>item <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> base    <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">[</span>base <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> bucketIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//通过桶生成排序后的数组</span>  temp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桶排序</title>
      <link href="/2019/10/08/bucket-sort/"/>
      <url>/2019/10/08/bucket-sort/</url>
      
        <content type="html"><![CDATA[<p>桶排序是一种分布式排序算法，时间复杂度为 O(n+k)。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>它根据元素大小将数组分为不同的桶(较小的数组),再使用一个简单的排序算法，例如插入排序(适合小数组的排序)，来对每个桶进行排序，最后将所有的桶合并为结果数组。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * arry 数组 * asc 是否升序排序 **/</span><span class="token comment" spellcheck="true">/** * 桶排序法 * @param {数组} arry * @param {是否升序排序} asc * @param {桶容量} bucketSize */</span><span class="token keyword">const</span> bucketSort <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> bucketSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arry  <span class="token punctuation">}</span>  <span class="token keyword">const</span> buckets <span class="token operator">=</span> <span class="token function">createBucket</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> asc<span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">sortBuckets</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> asc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> createBucket <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> min <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>      min <span class="token operator">=</span> cur    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> cur    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> bucketCnt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">const</span> buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> bucketIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span>      buckets<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> bucketIndex <span class="token operator">=</span> bucketCnt <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> cur<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span>      buckets<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> buckets<span class="token punctuation">}</span><span class="token keyword">const</span> sortBuckets <span class="token operator">=</span> <span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> asc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  buckets<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bucket <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">insertSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> asc<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>bucket<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>bucket<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数排序</title>
      <link href="/2019/10/06/count-sort/"/>
      <url>/2019/10/06/count-sort/</url>
      
        <content type="html"><![CDATA[<p>计数排序是一种分布式排序算法，分布式排序使用已组织好的辅助数据结构（称为桶）,然后进行合并，得到排好序的数组。<br>计数排序是用来排序正整数的优秀算法，时间复杂度为 O(n+k),k 为临时计数数组的大小。计数排序需要更多的内存来存放临时数组。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>使用一个用来存储每个元素在原始数组（0 至最大值）中出现次数的临时数组，迭代临时数组，并根据元素出现次数，依次添加到结果数组中。</p><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * arry 数组 * asc 是否升序排序 **/</span><span class="token keyword">const</span> countSort <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arry  <span class="token punctuation">}</span>  <span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token function">findMaxValue</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span>  <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  arry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>counts<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      counts<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    counts<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  counts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>asc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      count<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">const</span> findMaxValue <span class="token operator">=</span> arry <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> max<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/10/02/quick-sort/"/>
      <url>/2019/10/02/quick-sort/</url>
      
        <content type="html"><![CDATA[<p>快速排序是比较常用的一种排序算法，复杂度为 O(nlog(n))，使用的是分而治之的方法。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote><p>实现数组升序排序</p></blockquote><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>以数组中间值作为参考，将数组拆分为小数区域(小于等于中间值的元素)和大数区域(大于中间值的元素)。</li><li>对小数区域和大数区域分布进行 1 操作，递归直至拆分后的区域只有一个元素。</li></ol><h2 id="示例代码（js）"><a href="#示例代码（js）" class="headerlink" title="示例代码（js）"></a>示例代码（js）</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> quickSort <span class="token operator">=</span> arry <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arry<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 元素长度大于1，才进行排序。</span><span class="token comment" spellcheck="true">// 将元素拆分为左右大小区域，然后分别对左右区域进行拆分。</span><span class="token keyword">const</span> quick <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> arry  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">quick</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> index<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从数组两侧往中间遍历，以中间元素作为参考值。左侧向中间查找大于或等于参考值的元素，右侧向中间查找小于或等于参考值的元素。将查找到的左右两侧的元素进行替换，继续往中间查找。当左侧索引大于右侧索引，停止查找。最终左侧的元素都小于右侧的元素。</span><span class="token keyword">const</span> partition <span class="token operator">=</span> <span class="token punctuation">(</span>arry<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> asc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> arry<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left  <span class="token keyword">let</span> j <span class="token operator">=</span> right  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// {3}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      i<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>      j<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// {4}</span>      <span class="token function">swapInList</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      i<span class="token operator">++</span>      j<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token keyword">const</span> swapInList <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  temp <span class="token operator">=</span> list<span class="token punctuation">[</span>a<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>b<span class="token punctuation">]</span>  list<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">}</span></code></pre><p>假设中间参考值为 m。<br>对行 3 取 i === j 时，存在以下几种情况:</p><ol><li><p><code>arry[i] === arry[j] === m</code>，则 <code>i++,j--</code>，函数返回 i。对应于行 4 ，i === j 的情况。</p><blockquote><p><img src="/medias/quick-sort/1.png" alt=""></p></blockquote></li><li><p><code>arry[i] === arry[j] &lt; m</code>，则 <code>i++</code>，j 不变，函数返回 i。</p><blockquote><p><img src="/medias/quick-sort/2.png" alt=""><br>或者<br><img src="/medias/quick-sort/3.png" alt=""></p></blockquote></li><li><p><code>arry[i] === arry[j] &gt; m</code>，则 i 不变,<code>j--</code>，函数返回 i。</p><blockquote><p><img src="/medias/quick-sort/4.png" alt=""><br>或者<br><img src="/medias/quick-sort/5.png" alt=""></p></blockquote><p>因此数组中索引 0~i-1 为小数区域，&gt;=i 为大数区域，left &lt;= i &lt;= right。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
